import React, { useState, useEffect, useRef, useMemo } from 'react';
import { Search, ChevronDown, X, Menu, ArrowRight } from 'lucide-react';

// Sample Data (replace with API call)
const sampleCoaches = [
  {
    id: "mrvl01",
    title: "2024 Prevost Marathon H3-45 Quad Slide",
    price: 2150000,
    year: 2024,
    model: "H3-45",
    converter: "Marathon",
    slide_count: 4,
    images: ["https://placehold.co/600x400/0a0a0a/d4af37?text=Prevost+H3-45"],
    features: ["Quad Slide", "Bath and a Half", "King Bed", "Outdoor Entertainment"],
    dealer_name: "Marvelous Motorcoaches",
    dealer_state: "FL",
  },
  {
    id: "lgcy02",
    title: "2023 Prevost Liberty Elegant Lady #945",
    price: 1985000,
    year: 2023,
    model: "H3-45",
    converter: "Liberty Coach",
    slide_count: 4,
    images: ["https://placehold.co/600x400/111827/d4af37?text=Elegant+Lady"],
    features: ["Double Slide", "Custom Interior", "Advanced A/V", "Heated Floors"],
    dealer_name: "Legacy Coach Inc.",
    dealer_state: "TX",
  },
  {
    id: "nwel03",
    title: "2022 Prevost Newell Coach p50",
    price: 1750000,
    year: 2022,
    model: "H3-45",
    converter: "Newell Coach",
    slide_count: 4,
    images: ["https://placehold.co/600x400/1f2937/d4af37?text=Newell+p50"],
    features: ["Full Wall Slide", "Smart Home System", "Volvo D13 Engine", "Custom Paint"],
    dealer_name: "Newell Coach Corp.",
    dealer_state: "OK",
  },
  {
    id: "frth04",
    title: "2021 Prevost Foretravel ih-45",
    price: 1495000,
    year: 2021,
    model: "X3-45",
    converter: "Foretravel",
    slide_count: 3,
    images: ["https://placehold.co/600x400/374151/d4af37?text=Foretravel+ih-45"],
    features: ["Triple Slide", "Spartan K3 Chassis", "Rooftop Solar", "Luxury Appliances"],
    dealer_name: "Foretravel Motorcoach",
    dealer_state: "TX",
  },
  {
    id: "mrvl05",
    title: "2020 Prevost Marathon H3-45 Double Slide",
    price: 1250000,
    year: 2020,
    model: "H3-45",
    converter: "Marathon",
    slide_count: 2,
    images: ["https://placehold.co/600x400/4b5563/d4af37?text=Marathon+H3-45"],
    features: ["Double Slide", "Low Mileage", "Crestron Controls", "Fisher & Paykel Appliances"],
    dealer_name: "The Motorcoach Store",
    dealer_state: "FL",
  },
  {
    id: "lgcy06",
    title: "2019 Prevost Liberty H3-45",
    price: 1100000,
    year: 2019,
    model: "H3-45",
    converter: "Liberty Coach",
    slide_count: 4,
    images: ["https://placehold.co/600x400/6b7280/d4af37?text=Liberty+H3-45"],
    features: ["Quad Slide", "Recently Serviced", "Custom Cabinetry", "Outdoor Kitchen"],
    dealer_name: "Liberty Coach of Florida",
    dealer_state: "FL",
  }
];

// --- UTILITY FUNCTIONS ---
const formatCurrency = (value) => {
  if (value >= 1000000) {
    return `$${(value / 1000000).toFixed(1)}M`;
  }
  if (value >= 1000) {
    return `$${Math.round(value / 1000)}k`;
  }
  return `$${value}`;
};

// --- REUSABLE COMPONENTS ---

/**
 * Custom Price Range Slider Component
 * A dual-thumb slider for selecting a price range.
 */
const PriceSlider = ({ min, max, step, values, onChange }) => {
  const [minVal, setMinVal] = useState(values[0]);
  const [maxVal, setMaxVal] = useState(values[1]);
  const range = useRef(null);

  useEffect(() => {
    setMinVal(values[0]);
    setMaxVal(values[1]);
  }, [values]);

  const getPercent = (value) => Math.round(((value - min) / (max - min)) * 100);

  const handleMinChange = (e) => {
    const value = Math.min(Number(e.target.value), maxVal - step);
    setMinVal(value);
    onChange([value, maxVal]);
  };

  const handleMaxChange = (e) => {
    const value = Math.max(Number(e.target.value), minVal + step);
    setMaxVal(value);
    onChange([minVal, value]);
  };

  const minPercent = getPercent(minVal);
  const maxPercent = getPercent(maxVal);

  return (
    <div className="relative w-full py-4">
      <div className="relative h-1 bg-gray-700 rounded-full">
        <div
          ref={range}
          className="absolute h-1 bg-amber-500 rounded-full"
          style={{ left: `${minPercent}%`, width: `${maxPercent - minPercent}%` }}
        ></div>
        <div className="absolute flex justify-between w-full -top-3">
            <span className="text-xs text-gray-400">{formatCurrency(min)}</span>
            <span className="text-xs text-gray-400">{formatCurrency(max)}</span>
        </div>
      </div>
      <input
        type="range"
        min={min}
        max={max}
        step={step}
        value={minVal}
        onChange={handleMinChange}
        className="absolute w-full h-1 bg-transparent appearance-none pointer-events-auto top-4"
        style={{ zIndex: 3 }}
      />
      <input
        type="range"
        min={min}
        max={max}
        step={step}
        value={maxVal}
        onChange={handleMaxChange}
        className="absolute w-full h-1 bg-transparent appearance-none pointer-events-auto top-4"
        style={{ zIndex: 4 }}
      />
      <div className="flex justify-between mt-4">
        <div className="px-3 py-1 text-sm text-white bg-gray-800 border border-gray-700 rounded-md">
          {formatCurrency(minVal)}
        </div>
        <div className="px-3 py-1 text-sm text-white bg-gray-800 border border-gray-700 rounded-md">
          {formatCurrency(maxVal)}
        </div>
      </div>
    </div>
  );
};


/**
 * Custom Select Dropdown Component
 * A styled dropdown that matches the luxury theme.
 */
const CustomSelect = ({ label, options, value, onChange, placeholder }) => {
    const [isOpen, setIsOpen] = useState(false);
    const selectRef = useRef(null);

    useEffect(() => {
        const handleClickOutside = (event) => {
            if (selectRef.current && !selectRef.current.contains(event.target)) {
                setIsOpen(false);
            }
        };
        document.addEventListener("mousedown", handleClickOutside);
        return () => document.removeEventListener("mousedown", handleClickOutside);
    }, []);

    const handleSelect = (optionValue) => {
        onChange(optionValue);
        setIsOpen(false);
    };

    return (
        <div className="relative w-full" ref={selectRef}>
            <label className="block mb-2 text-sm font-medium text-gray-400">{label}</label>
            <button
                type="button"
                onClick={() => setIsOpen(!isOpen)}
                className="flex items-center justify-between w-full px-4 py-3 text-left bg-gray-800/50 border border-gray-700 rounded-lg shadow-sm backdrop-blur-sm focus:outline-none focus:ring-2 focus:ring-amber-500/50"
            >
                <span className="text-white">{value || placeholder}</span>
                <ChevronDown className={`w-5 h-5 text-gray-400 transition-transform duration-300 ${isOpen ? 'transform rotate-180' : ''}`} />
            </button>
            {isOpen && (
                <div className="absolute z-10 w-full mt-1 bg-gray-900 border border-gray-700 rounded-lg shadow-lg max-h-60 overflow-y-auto">
                    <ul>
                        {options.map((option, index) => (
                            <li
                                key={index}
                                onClick={() => handleSelect(option)}
                                className="px-4 py-2 text-white cursor-pointer hover:bg-amber-600/20"
                            >
                                {option}
                            </li>
                        ))}
                    </ul>
                </div>
            )}
        </div>
    );
};


/**
 * Hero Search Component
 * The main search interface on the homepage.
 */
const HeroSearch = ({ onSearch }) => {
  const [isAdvancedOpen, setIsAdvancedOpen] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [priceRange, setPriceRange] = useState([50000, 3000000]);
  const [converter, setConverter] = useState('');
  const [chassis, setChassis] = useState('');
  const [slides, setSlides] = useState('');
  const [yearRange, setYearRange] = useState([2015, new Date().getFullYear()]);
  
  const handleSearch = () => {
      onSearch({
          searchTerm,
          priceRange,
          converter,
          chassis,
          slides,
          yearRange
      });
  };

  const converters = useMemo(() => ["Marathon", "Liberty Coach", "Newell Coach", "Foretravel", "Millennium", "Featherlite"], []);
  const chassisTypes = useMemo(() => ["Prevost H3-45", "Prevost X3-45", "Volvo B13R", "Custom"], []);
  const slideOptions = useMemo(() => ["1", "2", "3", "4", "5"], []);

  return (
    <div className="relative z-10 w-full max-w-4xl mx-auto">
      <div className="bg-black/30 backdrop-blur-xl border border-white/10 rounded-2xl shadow-2xl shadow-black/50 p-4 md:p-6">
        <div className="relative flex items-center">
          <Search className="absolute left-4 w-6 h-6 text-gray-500" />
          <input
            type="text"
            placeholder="Search by model, year, or keyword..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full py-4 pl-14 pr-48 bg-gray-900/50 text-white placeholder-gray-400 border border-transparent rounded-lg focus:outline-none focus:ring-2 focus:ring-amber-500/80 transition-shadow duration-300 shadow-inner"
          />
          <button 
            onClick={handleSearch}
            className="absolute right-2 top-1/2 -translate-y-1/2 px-6 py-3 bg-amber-600 text-white font-bold rounded-lg hover:bg-amber-500 transform hover:scale-105 transition-all duration-300 shadow-lg shadow-amber-600/20"
          >
            Search
          </button>
        </div>
        
        <div className="mt-4 text-center">
            <button
                onClick={() => setIsAdvancedOpen(!isAdvancedOpen)}
                className="inline-flex items-center px-4 py-2 text-sm text-gray-300 hover:text-white transition-colors"
            >
                Advanced Filters
                <ChevronDown className={`w-5 h-5 ml-2 transition-transform duration-300 ${isAdvancedOpen ? 'rotate-180' : ''}`} />
            </button>
        </div>

        <div className={`transition-all duration-500 ease-in-out overflow-hidden ${isAdvancedOpen ? 'max-h-[1000px] opacity-100' : 'max-h-0 opacity-0'}`}>
            <div className="pt-6 border-t border-white/10">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-6">
                    <div className="md:col-span-2">
                        <label className="block mb-2 text-sm font-medium text-gray-400">Price Range</label>
                        <PriceSlider
                            min={50000}
                            max={3000000}
                            step={50000}
                            values={priceRange}
                            onChange={setPriceRange}
                        />
                    </div>
                    <CustomSelect label="Converter / Manufacturer" options={converters} value={converter} onChange={setConverter} placeholder="Any Converter" />
                    <CustomSelect label="Chassis Type" options={chassisTypes} value={chassis} onChange={setChassis} placeholder="Any Chassis" />
                    <CustomSelect label="Number of Slides" options={slideOptions} value={slides} onChange={setSlides} placeholder="Any" />
                    <div>
                      <label className="block mb-2 text-sm font-medium text-gray-400">Year Range</label>
                      <div className="flex items-center space-x-4">
                        <input type="number" value={yearRange[0]} onChange={e => setYearRange([e.target.value, yearRange[1]])} className="w-full px-4 py-3 bg-gray-800/50 border border-gray-700 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-amber-500/50" />
                        <span className="text-gray-500">-</span>
                        <input type="number" value={yearRange[1]} onChange={e => setYearRange([yearRange[0], e.target.value])} className="w-full px-4 py-3 bg-gray-800/50 border border-gray-700 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-amber-500/50" />
                      </div>
                    </div>
                </div>
            </div>
        </div>
      </div>
    </div>
  );
};


/**
 * Coach Card Component
 * Displays a single coach listing in a card format.
 */
const CoachCard = ({ coach }) => {
    return (
        <div className="group relative overflow-hidden rounded-2xl bg-black/30 backdrop-blur-lg border border-white/10 transition-all duration-500 hover:border-amber-500/50 hover:shadow-2xl hover:shadow-amber-900/50">
            <div className="absolute inset-0 bg-gradient-to-t from-black/80 via-black/40 to-transparent z-10"></div>
            <img 
                src={coach.images[0]} 
                alt={coach.title} 
                className="w-full h-64 object-cover transition-transform duration-500 group-hover:scale-110" 
                onError={(e) => { e.target.onerror = null; e.target.src = 'https://placehold.co/600x400/0a0a0a/333333?text=Image+Not+Found'; }}
            />
            <div className="absolute bottom-0 left-0 right-0 p-6 z-20 text-white">
                <h3 className="text-xl font-bold leading-tight truncate">{coach.title}</h3>
                <div className="flex justify-between items-end mt-2">
                    <div>
                        <p className="text-lg font-semibold text-amber-400">{formatCurrency(coach.price)}</p>
                        <p className="text-sm text-gray-400">{`${coach.year} • ${coach.converter}`}</p>
                    </div>
                    <div className="flex items-center space-x-2 text-sm text-gray-300">
                        <span>{`${coach.slide_count} Slides`}</span>
                    </div>
                </div>
            </div>
             <a href="#" className="absolute inset-0 z-30" aria-label={`View details for ${coach.title}`}></a>
        </div>
    );
};


/**
 * Coach Grid Component
 * Displays a grid of CoachCard components.
 */
const CoachGrid = ({ coaches, loading }) => {
    if (loading) {
        return (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
                {[...Array(6)].map((_, i) => (
                    <div key={i} className="rounded-2xl bg-gray-900/50 p-4 animate-pulse">
                        <div className="h-64 bg-gray-800 rounded-lg"></div>
                        <div className="mt-4 space-y-3">
                            <div className="h-4 bg-gray-800 rounded w-3/4"></div>
                            <div className="h-4 bg-gray-800 rounded w-1/2"></div>
                        </div>
                    </div>
                ))}
            </div>
        );
    }
    
    if (!coaches || coaches.length === 0) {
        return (
            <div className="text-center py-20">
                <h2 className="text-2xl font-bold text-white">No Coaches Found</h2>
                <p className="text-gray-400 mt-2">Try adjusting your search filters.</p>
            </div>
        )
    }

    return (
        <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-8">
            {coaches.map(coach => <CoachCard key={coach.id} coach={coach} />)}
        </div>
    );
};

// --- PAGE COMPONENTS ---

/**
 * Home Page Component
 * The main landing page with hero search and featured listings.
 */
const HomePage = () => {
    const [coaches, setCoaches] = useState([]);
    const [loading, setLoading] = useState(true);

    // Simulate API call
    useEffect(() => {
        setLoading(true);
        setTimeout(() => {
            setCoaches(sampleCoaches);
            setLoading(false);
        }, 1500);
    }, []);

    const handleSearch = (filters) => {
        console.log("Searching with filters:", filters);
        setLoading(true);
        // Simulate API call with filters
        setTimeout(() => {
            // Basic filtering simulation
            const filtered = sampleCoaches.filter(c => {
                const priceMatch = c.price >= filters.priceRange[0] && c.price <= filters.priceRange[1];
                const converterMatch = !filters.converter || c.converter === filters.converter;
                const searchTermMatch = !filters.searchTerm || c.title.toLowerCase().includes(filters.searchTerm.toLowerCase());
                return priceMatch && converterMatch && searchTermMatch;
            });
            setCoaches(filtered);
            setLoading(false);
        }, 1000);
    };

    return (
        <div className="w-full">
            {/* Hero Section */}
            <div className="relative flex items-center justify-center min-h-[70vh] md:min-h-[80vh] w-full overflow-hidden p-4">
                <div className="absolute inset-0 bg-gradient-to-b from-black/30 via-black/80 to-[#0a0a0a] z-0"></div>
                <div className="absolute inset-0 bg-cover bg-center bg-[url('https://placehold.co/1920x1080/0a0a0a/d4af37?text=PrevostGO')] opacity-20 blur-sm scale-110"></div>
                <div className="relative z-10 flex flex-col items-center text-center text-white">
                    <h1 className="text-4xl md:text-6xl lg:text-7xl font-extrabold tracking-tighter leading-tight drop-shadow-2xl">
                        The Pinnacle of Motorcoach Travel
                    </h1>
                    <p className="mt-4 max-w-2xl text-lg md:text-xl text-gray-300 drop-shadow-lg">
                        Discover an exclusive collection of the world's finest Prevost conversions. Your journey begins here.
                    </p>
                    <div className="w-full mt-12">
                        <HeroSearch onSearch={handleSearch} />
                    </div>
                </div>
            </div>

            {/* Featured Listings Section */}
            <main className="container mx-auto px-4 sm:px-6 lg:px-8 py-16 sm:py-24">
                <div className="flex justify-between items-center mb-12">
                     <h2 className="text-3xl md:text-4xl font-bold text-white tracking-tight">Featured Inventory</h2>
                     <a href="#" className="group inline-flex items-center text-amber-400 hover:text-amber-300 transition-colors">
                        View All
                        <ArrowRight className="w-4 h-4 ml-2 transition-transform duration-300 group-hover:translate-x-1" />
                     </a>
                </div>
                <CoachGrid coaches={coaches} loading={loading} />
            </main>
        </div>
    );
};

const Header = ({ onNavigate, activePage }) => {
    const [isMenuOpen, setIsMenuOpen] = useState(false);
    const navLinks = [
        { name: 'Home', page: 'home' },
        { name: 'Inventory', page: 'inventory' },
        { name: 'About', page: 'about' },
        { name: 'Contact', page: 'contact' },
    ];

    return (
        <header className="absolute top-0 left-0 right-0 z-50">
            <nav className="container mx-auto px-4 sm:px-6 lg:px-8 py-6">
                <div className="flex items-center justify-between">
                    <a href="#" onClick={() => onNavigate('home')} className="text-2xl font-bold text-white tracking-wider">
                        Prevost<span className="text-amber-500">GO</span>
                    </a>
                    
                    {/* Desktop Nav */}
                    <div className="hidden md:flex items-center space-x-8">
                        {navLinks.map(link => (
                            <a 
                                key={link.page} 
                                href="#" 
                                onClick={() => onNavigate(link.page)} 
                                className={`text-sm font-medium transition-colors ${activePage === link.page ? 'text-amber-400' : 'text-gray-300 hover:text-white'}`}
                            >
                                {link.name}
                            </a>
                        ))}
                    </div>
                    
                    <div className="hidden md:flex">
                        <a href="#" className="px-5 py-2 text-sm font-medium text-white bg-white/5 border border-white/20 rounded-lg backdrop-blur-sm hover:bg-white/10 transition-colors">
                            List Your Coach
                        </a>
                    </div>

                    {/* Mobile Nav Button */}
                    <div className="md:hidden">
                        <button onClick={() => setIsMenuOpen(!isMenuOpen)} className="text-white">
                            {isMenuOpen ? <X size={28} /> : <Menu size={28} />}
                        </button>
                    </div>
                </div>

                {/* Mobile Menu */}
                <div className={`transition-all duration-300 ease-in-out md:hidden ${isMenuOpen ? 'max-h-screen opacity-100' : 'max-h-0 opacity-0'} overflow-hidden`}>
                    <div className="mt-6 bg-black/50 backdrop-blur-lg rounded-lg p-4 space-y-4">
                        {navLinks.map(link => (
                             <a 
                                key={link.page} 
                                href="#" 
                                onClick={() => { onNavigate(link.page); setIsMenuOpen(false); }} 
                                className={`block py-2 text-center rounded-md ${activePage === link.page ? 'text-amber-400 bg-white/10' : 'text-gray-200 hover:bg-white/5'}`}
                            >
                                {link.name}
                            </a>
                        ))}
                         <a href="#" className="block w-full mt-2 px-5 py-3 text-center font-medium text-white bg-amber-600 rounded-lg hover:bg-amber-500 transition-colors">
                            List Your Coach
                        </a>
                    </div>
                </div>
            </nav>
        </header>
    );
};

const Footer = () => {
    return (
        <footer className="bg-black border-t border-white/10">
            <div className="container mx-auto px-4 sm:px-6 lg:px-8 py-12">
                <div className="grid grid-cols-1 md:grid-cols-4 gap-8">
                    <div className="md:col-span-1">
                        <h3 className="text-xl font-bold text-white">Prevost<span className="text-amber-500">GO</span></h3>
                        <p className="mt-2 text-gray-400 text-sm">The premier marketplace for luxury Prevost motorcoaches.</p>
                    </div>
                    <div>
                        <h4 className="font-semibold text-gray-200">Quick Links</h4>
                        <ul className="mt-4 space-y-2 text-sm">
                            <li><a href="#" className="text-gray-400 hover:text-amber-400">Inventory</a></li>
                            <li><a href="#" className="text-gray-400 hover:text-amber-400">Sell Your Coach</a></li>
                            <li><a href="#" className="text-gray-400 hover:text-amber-400">Financing</a></li>
                        </ul>
                    </div>
                    <div>
                        <h4 className="font-semibold text-gray-200">About</h4>
                        <ul className="mt-4 space-y-2 text-sm">
                            <li><a href="#" className="text-gray-400 hover:text-amber-400">About Us</a></li>
                            <li><a href="#" className="text-gray-400 hover:text-amber-400">Contact</a></li>
                            <li><a href="#" className="text-gray-400 hover:text-amber-400">Privacy Policy</a></li>
                        </ul>
                    </div>
                    <div>
                        <h4 className="font-semibold text-gray-200">Connect</h4>
                        <p className="mt-4 text-gray-400 text-sm">Stay up to date with the latest listings and news.</p>
                        {/* Newsletter form can go here */}
                    </div>
                </div>
                <div className="mt-12 border-t border-white/10 pt-8 text-center text-sm text-gray-500">
                    <p>&copy; {new Date().getFullYear()} PrevostGO. All rights reserved. Not affiliated with Prevost Car Inc.</p>
                </div>
            </div>
        </footer>
    );
};


// --- MAIN APP COMPONENT ---
export default function App() {
  const [page, setPage] = useState('home');

  const renderPage = () => {
    switch (page) {
      case 'home':
        return <HomePage />;
      case 'inventory':
        // For now, just show the HomePage content for other routes
        return <HomePage />;
      case 'about':
        return <div className="text-white text-center py-40">About Page Content</div>;
      case 'contact':
        return <div className="text-white text-center py-40">Contact Page Content</div>;
      default:
        return <HomePage />;
    }
  };

  return (
    <div className="bg-[#0a0a0a] min-h-screen font-sans text-white relative">
      {/* Animated Gradient Background */}
      <div className="absolute inset-0 z-0 overflow-hidden">
          <div className="absolute top-0 left-0 w-96 h-96 bg-amber-900/30 rounded-full filter blur-3xl opacity-30 animate-blob"></div>
          <div className="absolute top-0 right-0 w-96 h-96 bg-blue-900/30 rounded-full filter blur-3xl opacity-30 animate-blob animation-delay-2000"></div>
          <div className="absolute bottom-0 left-1/4 w-96 h-96 bg-amber-800/20 rounded-full filter blur-3xl opacity-30 animate-blob animation-delay-4000"></div>
      </div>
      {/* Noise Texture Overlay */}
      <div className="absolute inset-0 z-0 opacity-[0.02] bg-[url('data:image/svg+xml,%3Csvg%20width%3D%22100%22%20height%3D%22100%22%20xmlns%3D%22http%3A//www.w3.org/2000/svg%22%3E%3Cdefs%3E%3Cfilter%20id%3D%22noise%22%3E%3CfeTurbulence%20type%3D%22fractalNoise%22%20baseFrequency%3D%220.8%22%20numOctaves%3D%224%22%20stitchTiles%3D%22stitch%22/%3E%3C/filter%3E%3C/defs%3E%3Crect%20width%3D%22100%25%22%20height%3D%22100%25%22%20filter%3D%22url(%23noise)%22/%3E%3C/svg%3E')]"></div>
      
      <div className="relative z-10 flex flex-col min-h-screen">
          <Header onNavigate={setPage} activePage={page} />
          <div className="flex-grow">
              {renderPage()}
          </div>
          <Footer />
      </div>
    </div>
  );
}
